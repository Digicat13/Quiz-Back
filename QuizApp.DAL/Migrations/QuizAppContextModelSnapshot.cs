// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.DAL;

namespace QuizApp.DAL.Migrations
{
    [DbContext(typeof(QuizAppContext))]
    partial class QuizAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("QuizApp.DAL.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("QuestionTimeLimit")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TestTimeLimit")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswer");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HintText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("IntervieweeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuestionTried")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestingEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TestingStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TestingUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestingUrlId");

                    b.ToTable("TestingResult");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingResultAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestingResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestAnswerId");

                    b.HasIndex("TestQuestionId");

                    b.HasIndex("TestingResultId");

                    b.ToTable("TestingResultAnswer");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AllowedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AllowedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntervieweeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfRuns")
                        .HasColumnType("int");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestingUrl");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestAnswer", b =>
                {
                    b.HasOne("QuizApp.DAL.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestQuestion", b =>
                {
                    b.HasOne("QuizApp.DAL.Entities.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingResult", b =>
                {
                    b.HasOne("QuizApp.DAL.Entities.TestingUrl", "TestingUrl")
                        .WithMany("TestingResults")
                        .HasForeignKey("TestingUrlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestingUrl");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingResultAnswer", b =>
                {
                    b.HasOne("QuizApp.DAL.Entities.TestAnswer", "TestAnswer")
                        .WithMany("TestingResultAnswers")
                        .HasForeignKey("TestAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizApp.DAL.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestingResultAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizApp.DAL.Entities.TestingResult", "TestingResult")
                        .WithMany("TestingResultAnswers")
                        .HasForeignKey("TestingResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestAnswer");

                    b.Navigation("TestingResult");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingUrl", b =>
                {
                    b.HasOne("QuizApp.DAL.Entities.Test", "Test")
                        .WithMany("TestingUrls")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.Test", b =>
                {
                    b.Navigation("TestingUrls");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestAnswer", b =>
                {
                    b.Navigation("TestingResultAnswers");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");

                    b.Navigation("TestingResultAnswers");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingResult", b =>
                {
                    b.Navigation("TestingResultAnswers");
                });

            modelBuilder.Entity("QuizApp.DAL.Entities.TestingUrl", b =>
                {
                    b.Navigation("TestingResults");
                });
#pragma warning restore 612, 618
        }
    }
}
